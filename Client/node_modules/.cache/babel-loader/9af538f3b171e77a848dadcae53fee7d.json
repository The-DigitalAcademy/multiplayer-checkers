{"ast":null,"code":"var _jsxFileName = \"/Users/dam136/Desktop/React-Checkers-master/multiplayer-checkers/Client/src/components/Checkers.js\";\nimport React from 'react';\nimport { StyledBoard } from './styles/StyledBoard';\nimport Cell from './Cell';\nimport GameOverPanel from './GameOverPanel';\nimport GameOverButton from './GameOverButton';\n\nconst CreateBoard = () => {\n  let cols = [];\n\n  for (let y = 0; y < 10; y++) {\n    let row = [];\n\n    for (let x = 0; x < 10; x++) {\n      row.push({\n        cords: [x, y],\n        color: x % 2 === 0 && y % 2 === 0 || x % 2 !== 0 && y % 2 !== 0 ? \"BurlyWood\" : \"white\",\n        highlighted: false,\n        forced: false,\n        canHit: false,\n        usedBy: x % 2 !== 0 && y % 2 === 0 || x % 2 === 0 && y % 2 !== 0 ? \"\" : y < 4 ? \"P1\" : y > 5 ? \"P2\" : \"\"\n      });\n    }\n\n    cols.push(row);\n  }\n\n  cols.reverse();\n  return cols;\n};\n\nconst initialState = {\n  board: CreateBoard(),\n  turn: \"P1\",\n  finished: false,\n  winner: \"\"\n};\nvar lastSelectedCell;\nvar highlightedCells = [];\nvar hittableCells = [];\nvar cellsTohitFrom = [];\nvar killedSomeone;\nvar tempBoard;\n\nclass Checkers extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.BackToMenu = () => {\n      this.props.socket.emit('user-left');\n      this.props.returnCallback();\n    };\n\n    this.RestartGame = () => {\n      console.log(\"Restart game\");\n      lastSelectedCell = undefined;\n      highlightedCells = [];\n      hittableCells = [];\n      cellsTohitFrom = [];\n      killedSomeone = false;\n      tempBoard = undefined;\n      this.setState({\n        board: CreateBoard(),\n        turn: initialState.turn,\n        finished: initialState.finished,\n        winner: initialState.winner\n      });\n    };\n\n    this.state = initialState;\n\n    this.CellClick = cellInfo => {\n      if (this.state.gameFinished || this.props.matchStarted === false) {\n        return;\n      }\n\n      if (this.state.turn !== this.props.player) {\n        return;\n      }\n\n      tempBoard = this.state.board;\n\n      if (cellInfo.usedBy !== \"\") {\n        if (cellInfo.usedBy !== this.state.turn) {\n          return;\n        }\n\n        highlightedCells.forEach(highlightedCell => highlightedCell.highlighted = false);\n        highlightedCells = [];\n\n        if (cellsTohitFrom.length > 0) {\n          if (cellsTohitFrom.includes(cellInfo) === false) {\n            return;\n          }\n        }\n\n        lastSelectedCell = cellInfo;\n        this.DoHightlight(cellInfo.cords, cellInfo.usedBy === \"P1\" ? true : false, true, true, false);\n\n        if (cellInfo.king === true) {\n          this.DoHightlight(cellInfo.cords, cellInfo.usedBy === \"P1\" ? false : true, true, true, false);\n        }\n      } else if (cellInfo.highlighted) {\n        this.DoMove(cellInfo);\n        lastSelectedCell = cellInfo;\n      }\n\n      if (hittableCells.length > 0) {\n        hittableCells.forEach(hittableCell => hittableCell.forced = true);\n        highlightedCells.forEach(highlightedCell => {\n          if (highlightedCell.forced === false) {\n            highlightedCell.highlighted = false;\n          }\n        });\n      }\n\n      this.setState({\n        board: tempBoard\n      });\n    };\n\n    this.GetCell = localCords => {\n      var worldCell = undefined;\n      tempBoard.filter(function (col) {\n        if (col[1].cords[1] === localCords[1]) {\n          col.filter(function (cell) {\n            if (cell.cords[0] === localCords[0]) {\n              worldCell = cell;\n            }\n          });\n        }\n      });\n\n      if (worldCell === undefined) {\n        console.log(\"Failed convertion from local to global cords\");\n      }\n\n      return worldCell;\n    };\n\n    this.DoHightlight = (cords, upwards, checkLeft, checkRight, secondSearch) => {\n      //left\n      if (cords[0] !== 0 && cords[1] !== (upwards ? 9 : 0) && checkLeft) {\n        let cell = this.GetCell([cords[0] - 1, cords[1] + (upwards ? 1 : -1)]);\n\n        if (cell.usedBy === \"\") {\n          cell.highlighted = true;\n          highlightedCells.push(cell);\n        } else if (lastSelectedCell !== undefined && cell.usedBy !== lastSelectedCell.usedBy && secondSearch === false) {\n          this.DoHightlight(cell.cords, upwards, true, false, true);\n        }\n      } //right\n\n\n      if (cords[0] !== 9 && cords[1] !== (upwards ? 9 : 0) && checkRight) {\n        let cell = this.GetCell([cords[0] + 1, cords[1] + (upwards ? 1 : -1)]);\n\n        if (cell.usedBy === \"\") {\n          cell.highlighted = true;\n          highlightedCells.push(cell);\n        } else if (lastSelectedCell !== undefined && cell.usedBy !== lastSelectedCell.usedBy && secondSearch === false) {\n          this.DoHightlight(cell.cords, upwards, false, true, true);\n        }\n      }\n    };\n\n    this.FindForced = (fromCell, cords, upwards, checkLeft, checkRight, secondSearch) => {\n      //left\n      if (cords[0] !== 0 && cords[1] !== (upwards ? 9 : 0) && checkLeft) {\n        let cell = this.GetCell([cords[0] - 1, cords[1] + (upwards ? 1 : -1)]);\n\n        if (cell.usedBy === \"\" && secondSearch) {\n          hittableCells.push(cell);\n          cellsTohitFrom.push(fromCell);\n          fromCell.canHit = true;\n        } else if (cell.usedBy !== fromCell.usedBy && cell.usedBy !== \"\" && secondSearch === false) {\n          this.FindForced(fromCell, cell.cords, upwards, true, false, true);\n        }\n      } //right\n\n\n      if (cords[0] !== 9 && cords[1] !== (upwards ? 9 : 0) && checkRight) {\n        let cell = this.GetCell([cords[0] + 1, cords[1] + (upwards ? 1 : -1)]);\n\n        if (cell.usedBy === \"\" && secondSearch) {\n          hittableCells.push(cell);\n          cellsTohitFrom.push(fromCell);\n          fromCell.canHit = true;\n        } else if (cell.usedBy !== fromCell.usedBy && cell.usedBy !== \"\" && secondSearch === false) {\n          this.FindForced(fromCell, cell.cords, upwards, false, true, true);\n        }\n      }\n    };\n\n    this.DoMove = cellInfo => {\n      if (lastSelectedCell === undefined) {\n        return;\n      } //disable highlights and forced\n\n\n      highlightedCells.forEach(highlightedCell => highlightedCell.highlighted = false);\n      highlightedCells = [];\n      hittableCells.forEach(hittableCell => hittableCell.forced = false);\n      hittableCells = [];\n      cellsTohitFrom.forEach(fromCell => fromCell.canHit = false);\n      cellsTohitFrom = [];\n      var killedCellCoords = [];\n\n      if (Math.abs(cellInfo.cords[0] - lastSelectedCell.cords[0]) >= 2 || Math.abs(cellInfo.cords[1] - lastSelectedCell.cords[1]) >= 2) {\n        killedSomeone = true;\n        killedCellCoords.push((cellInfo.cords[0] + lastSelectedCell.cords[0]) * 0.5);\n        killedCellCoords.push((cellInfo.cords[1] + lastSelectedCell.cords[1]) * 0.5);\n      } //remove piece from old and place on new\n\n\n      cellInfo.usedBy = lastSelectedCell.usedBy;\n      cellInfo.king = lastSelectedCell.king;\n\n      if (cellInfo.usedBy === \"P1\" && cellInfo.cords[1] === 9 || cellInfo.usedBy === \"P2\" && cellInfo.cords[1] === 0) {\n        cellInfo.king = true;\n      }\n\n      lastSelectedCell.usedBy = \"\";\n      lastSelectedCell.king = false;\n      lastSelectedCell = cellInfo; //find forced next moves\n\n      if (killedSomeone) {\n        killedSomeone = false;\n        this.GetCell(killedCellCoords).usedBy = \"\";\n        this.FindForced(cellInfo, cellInfo.cords, cellInfo.usedBy === \"P1\" ? true : false, true, true, false);\n\n        if (cellInfo.king) {\n          this.FindForced(cellInfo, cellInfo.cords, cellInfo.usedBy === \"P1\" ? false : true, true, true, false);\n        }\n      }\n\n      if (hittableCells.length > 0) {\n        hittableCells.forEach(hittableCell => hittableCell.forced = true);\n        this.DoHightlight(cellInfo.cords, cellInfo.usedBy === \"P1\" ? true : false, true, true, false);\n\n        if (cellInfo.king) {\n          this.DoHightlight(cellInfo.cords, cellInfo.usedBy === \"P1\" ? false : true, true, true, false);\n        }\n\n        this.props.socket.emit(\"user-kill-piece\", {\n          turn: this.state.turn,\n          board: this.state.board\n        });\n      } else {\n        this.SwitchTurn();\n      }\n    };\n\n    this.ReceiveKillMove = receivedData => {\n      var currrentTurn = receivedData.turn;\n      var board = receivedData.board;\n      board.map(row => row.map(cell => {\n        cell.highlighted = false;\n        cell.forced = false;\n        cell.canHit = false;\n      }));\n      this.setState({\n        turn: currrentTurn,\n        board: board\n      });\n    };\n\n    this.ReceiveMove = receivedData => {\n      var currrentTurn = receivedData.turn;\n      var board = receivedData.board;\n      tempBoard = receivedData.board;\n      console.log(receivedData);\n      var tilesToCheck = [];\n      board.filter(function (col) {\n        col.filter(function (cell) {\n          if (cell.usedBy === currrentTurn) {\n            tilesToCheck.push(cell);\n          }\n        });\n      });\n\n      if (tilesToCheck.length === 0) {\n        var previousTurn = currrentTurn === \"P1\" ? \"P2\" : \"P1\";\n        var winner;\n\n        if (previousTurn === \"P1\" && this.props.isHost || previousTurn === \"P2\" && this.props.isHost === false) {\n          winner = this.props.name;\n        } else {\n          winner = this.props.opponentName;\n        }\n\n        this.setState({\n          winner: winner,\n          finished: true\n        });\n      }\n\n      tilesToCheck.forEach(cell => {\n        this.FindForced(cell, cell.cords, currrentTurn === \"P1\" ? true : false, true, true, false);\n\n        if (cell.king) {\n          this.FindForced(cell, cell.cords, currrentTurn === \"P1\" ? false : true, true, true, false);\n        }\n      });\n      hittableCells.forEach(hittableCell => hittableCell.forced = true);\n      this.setState({\n        turn: currrentTurn,\n        board: board\n      });\n    };\n  }\n\n  componentDidMount() {\n    console.log(\"Added event listener\");\n    this.props.socket.on('user-switch-turn', this.ReceiveMove);\n    this.props.socket.on('user-kill-piece', this.ReceiveKillMove);\n  }\n\n  SwitchTurn() {\n    killedSomeone = false;\n    var previousTurn = this.state.turn;\n    var currrentTurn;\n\n    if (hittableCells.length === 0) {\n      if (previousTurn === \"P1\") {\n        currrentTurn = \"P2\";\n      } else {\n        currrentTurn = \"P1\";\n      }\n    }\n\n    var tilesToCheck = [];\n    this.state.board.filter(function (col) {\n      col.filter(function (cell) {\n        if (cell.usedBy === currrentTurn) {\n          tilesToCheck.push(cell);\n        }\n      });\n    });\n\n    if (tilesToCheck.length === 0) {\n      var winner;\n\n      if (previousTurn === \"P1\" && this.props.isHost || previousTurn === \"P2\" && this.props.isHost === false) {\n        winner = this.props.name;\n      } else {\n        winner = this.props.opponentName;\n      }\n\n      this.setState({\n        winner: winner,\n        finished: true\n      });\n    }\n\n    this.setState({\n      turn: currrentTurn\n    });\n    this.props.flipTurnCallback();\n    this.props.socket.emit(\"user-switch-turn\", {\n      turn: currrentTurn,\n      board: this.state.board\n    });\n  }\n\n  render() {\n    var gameOverUI = \"\";\n\n    if (this.state.finished) {\n      gameOverUI = [/*#__PURE__*/React.createElement(GameOverPanel, {\n        winner: this.state.winner,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 370,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(GameOverButton, {\n        callback: this.BackToMenu,\n        text: \"Return\",\n        left: \"15\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 371,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(GameOverButton, {\n        callback: this.RestartGame,\n        text: \"Rematch\",\n        left: \"55\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 372,\n          columnNumber: 17\n        }\n      })];\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"checkerContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(StyledBoard, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 17\n      }\n    }, this.state.board.map(row => row.map((cell, x) => /*#__PURE__*/React.createElement(Cell, {\n      key: x,\n      onCellClick: this.CellClick,\n      cellInfo: cell,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 71\n      }\n    })))), gameOverUI);\n  }\n\n}\n\n;\nexport default Checkers;","map":{"version":3,"sources":["/Users/dam136/Desktop/React-Checkers-master/multiplayer-checkers/Client/src/components/Checkers.js"],"names":["React","StyledBoard","Cell","GameOverPanel","GameOverButton","CreateBoard","cols","y","row","x","push","cords","color","highlighted","forced","canHit","usedBy","reverse","initialState","board","turn","finished","winner","lastSelectedCell","highlightedCells","hittableCells","cellsTohitFrom","killedSomeone","tempBoard","Checkers","Component","BackToMenu","props","socket","emit","returnCallback","RestartGame","console","log","undefined","setState","state","CellClick","cellInfo","gameFinished","matchStarted","player","forEach","highlightedCell","length","includes","DoHightlight","king","DoMove","hittableCell","GetCell","localCords","worldCell","filter","col","cell","upwards","checkLeft","checkRight","secondSearch","FindForced","fromCell","killedCellCoords","Math","abs","SwitchTurn","ReceiveKillMove","receivedData","currrentTurn","map","ReceiveMove","tilesToCheck","previousTurn","isHost","name","opponentName","componentDidMount","on","flipTurnCallback","render","gameOverUI"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { StyledBoard } from './styles/StyledBoard';\nimport Cell from './Cell';\nimport GameOverPanel from './GameOverPanel';\nimport GameOverButton from './GameOverButton';\n\nconst CreateBoard = () => {\n    let cols = [];\n    \n    for (let y = 0; y < 10; y++) {\n        let row = [];\n        for (let x = 0; x < 10; x++) {\n            row.push({\n                cords: [x, y], \n                color: (x % 2 === 0 && y % 2 === 0) || (x % 2 !== 0 && y % 2 !== 0) ? \"BurlyWood\" : \"white\",\n                highlighted: false,\n                forced: false,\n                canHit: false,\n                usedBy: (x % 2 !== 0 && y % 2 === 0) || (x % 2 === 0 && y % 2 !== 0) ? \"\" : (y < 4) ? \"P1\" : (y > 5) ? \"P2\" : \"\"\n            })\n        }\n        cols.push(row);\n    }\n\n    cols.reverse();\n    \n    return cols;\n};\n\nconst initialState = {\n    board: CreateBoard(),\n    turn: \"P1\",\n    finished: false,\n    winner: \"\",\n}\n\n\nvar lastSelectedCell;\nvar highlightedCells = [];\nvar hittableCells = [];\nvar cellsTohitFrom = [];\nvar killedSomeone;\nvar tempBoard;\n\nclass Checkers extends React.Component {    \n\n    componentDidMount() {\n        console.log(\"Added event listener\");\n        this.props.socket.on('user-switch-turn', this.ReceiveMove);\n        this.props.socket.on('user-kill-piece', this.ReceiveKillMove);\n    }\n\n    BackToMenu = () => { \n        this.props.socket.emit('user-left');\n        this.props.returnCallback();\n    }\n\n    RestartGame = () => { \n        console.log(\"Restart game\");\n        lastSelectedCell = undefined;\n        highlightedCells = [];\n        hittableCells = [];\n        cellsTohitFrom = [];\n        killedSomeone = false;\n        tempBoard = undefined;\n\n        this.setState({\n            board: CreateBoard(),\n            turn: initialState.turn,\n            finished: initialState.finished,\n            winner: initialState.winner,\n        });\n    }\n\n    state = initialState;\n\n    CellClick = (cellInfo) => {\n        if(this.state.gameFinished || this.props.matchStarted === false) {\n            return;\n        }\n\n        if(this.state.turn !== this.props.player) {\n            return;\n        }\n\n        tempBoard = this.state.board;\n\n        if(cellInfo.usedBy !== \"\"){\n            if(cellInfo.usedBy !== this.state.turn){\n                return;\n            }\n\n            highlightedCells.forEach(highlightedCell =>  highlightedCell.highlighted = false);\n            highlightedCells = [];\n\n            if(cellsTohitFrom.length > 0) {\n                if(cellsTohitFrom.includes(cellInfo) === false){\n                    return;\n                }\n            }\n\n            lastSelectedCell = cellInfo;\n            this.DoHightlight(cellInfo.cords, cellInfo.usedBy === \"P1\" ? true : false, true, true, false);\n            if(cellInfo.king === true) {\n                this.DoHightlight(cellInfo.cords, cellInfo.usedBy === \"P1\" ? false : true, true, true, false);\n            }\n        } else if (cellInfo.highlighted) {\n            this.DoMove(cellInfo)\n            lastSelectedCell = cellInfo;\n        }\n\n        if(hittableCells.length > 0){\n            hittableCells.forEach(hittableCell => hittableCell.forced = true);\n\n            highlightedCells.forEach(highlightedCell => {\n                if(highlightedCell.forced === false) {\n                    highlightedCell.highlighted = false;\n                }\n            });\n        }\n\n        this.setState({\n            board: tempBoard,\n        })\n    }\n\n    GetCell = (localCords) => {\n        var worldCell = undefined;\n        tempBoard.filter(function (col) {\n            if(col[1].cords[1] === localCords[1]) {\n                col.filter(function (cell) {\n                    if(cell.cords[0] === localCords[0]){\n                        worldCell = cell;\n                    }\n                })\n            }\n        })\n\n        if(worldCell === undefined){\n            console.log(\"Failed convertion from local to global cords\");\n        }\n\n        return worldCell;\n    }\n\n    DoHightlight = (cords, upwards, checkLeft, checkRight, secondSearch) => {\n        //left\n        if(cords[0] !== 0 && cords[1] !== (upwards ? 9 : 0) && checkLeft) {\n            let cell = this.GetCell([cords[0] - 1, cords[1] + (upwards ? 1 : -1)]);\n\n            if(cell.usedBy === \"\"){\n                cell.highlighted = true;\n                highlightedCells.push(cell);\n            } else if (lastSelectedCell !== undefined && cell.usedBy !== lastSelectedCell.usedBy && secondSearch === false) {\n                this.DoHightlight(cell.cords, upwards, true, false, true);\n            }\n        }\n\n        //right\n        if(cords[0] !== 9 && cords[1] !== (upwards ? 9 : 0) && checkRight) {\n            let cell = this.GetCell([cords[0] + 1, cords[1] + (upwards ? 1 : -1)]);\n\n            if(cell.usedBy === \"\"){\n                cell.highlighted = true;\n                highlightedCells.push(cell);\n            } else if (lastSelectedCell !== undefined && cell.usedBy !== lastSelectedCell.usedBy && secondSearch === false) {\n                this.DoHightlight(cell.cords, upwards, false, true, true);\n            }\n        }\n    }\n\n    FindForced = (fromCell, cords, upwards, checkLeft, checkRight, secondSearch) => {\n\n        //left\n        if(cords[0] !== 0 && cords[1] !== (upwards ? 9 : 0) && checkLeft) {\n            let cell = this.GetCell([cords[0] - 1, cords[1] + (upwards ? 1 : -1)]);\n\n            if(cell.usedBy === \"\" && secondSearch) {\n                hittableCells.push(cell);\n                cellsTohitFrom.push(fromCell);\n                fromCell.canHit = true;\n            } else if (cell.usedBy !== fromCell.usedBy && cell.usedBy !== \"\" && secondSearch === false) {\n                this.FindForced(fromCell, cell.cords, upwards, true, false, true);\n            }\n        }\n\n        //right\n        if(cords[0] !== 9 && cords[1] !== (upwards ? 9 : 0) && checkRight) {\n            let cell = this.GetCell([cords[0] + 1, cords[1] + (upwards ? 1 : -1)]);\n\n\n            if(cell.usedBy === \"\" && secondSearch) {\n                hittableCells.push(cell);\n                cellsTohitFrom.push(fromCell);\n                fromCell.canHit = true;\n            } else if (cell.usedBy !== fromCell.usedBy && cell.usedBy !== \"\" && secondSearch === false) {\n                this.FindForced(fromCell, cell.cords, upwards, false, true, true);\n          }\n        }\n    }\n\n    DoMove = (cellInfo) => {\n        if(lastSelectedCell === undefined) {\n            return;\n        }\n\n        //disable highlights and forced\n        highlightedCells.forEach(highlightedCell => highlightedCell.highlighted = false);\n        highlightedCells = [];\n\n        hittableCells.forEach(hittableCell =>  hittableCell.forced = false);\n        hittableCells = [];\n\n        cellsTohitFrom.forEach(fromCell => fromCell.canHit = false);\n        cellsTohitFrom = [];\n\n        var killedCellCoords = [];\n        if(Math.abs(cellInfo.cords[0] - lastSelectedCell.cords[0]) >= 2 || Math.abs(cellInfo.cords[1] - lastSelectedCell.cords[1]) >= 2) {\n            killedSomeone = true;\n            killedCellCoords.push((cellInfo.cords[0] + lastSelectedCell.cords[0]) * 0.5);\n            killedCellCoords.push((cellInfo.cords[1] + lastSelectedCell.cords[1]) * 0.5);\n        }\n\n        //remove piece from old and place on new\n        cellInfo.usedBy = lastSelectedCell.usedBy;\n        cellInfo.king = lastSelectedCell.king;\n        if((cellInfo.usedBy === \"P1\" && cellInfo.cords[1] === 9) || (cellInfo.usedBy === \"P2\" && cellInfo.cords[1] === 0)){\n            cellInfo.king = true;\n        }\n\n        lastSelectedCell.usedBy = \"\";\n        lastSelectedCell.king = false;\n        lastSelectedCell = cellInfo;\n\n        //find forced next moves\n        if(killedSomeone){\n            killedSomeone = false;\n            this.GetCell(killedCellCoords).usedBy = \"\";\n            this.FindForced(cellInfo, cellInfo.cords, cellInfo.usedBy === \"P1\" ? true : false, true, true, false);\n            if(cellInfo.king) {\n                this.FindForced(cellInfo, cellInfo.cords, cellInfo.usedBy === \"P1\" ? false : true, true, true, false);\n            }\n        }\n\n        if(hittableCells.length > 0){\n            hittableCells.forEach(hittableCell =>  hittableCell.forced = true);\n            this.DoHightlight(cellInfo.cords, cellInfo.usedBy === \"P1\" ? true : false, true, true, false);\n            if(cellInfo.king) {\n                this.DoHightlight(cellInfo.cords, cellInfo.usedBy === \"P1\" ? false : true, true, true, false);\n            }\n\n            this.props.socket.emit(\"user-kill-piece\", {turn: this.state.turn, board: this.state.board});\n        } else{\n            this.SwitchTurn();    \n        }\n\n    }\n\n    SwitchTurn() {\n        killedSomeone = false;\n        var previousTurn = this.state.turn;\n        var currrentTurn;\n        if(hittableCells.length === 0) {\n            if(previousTurn === \"P1\") {\n                currrentTurn = \"P2\";\n            } else {\n                currrentTurn = \"P1\";\n            }\n        }\n\n        var tilesToCheck = [];\n        this.state.board.filter(function (col) {\n            col.filter(function (cell) {\n                if(cell.usedBy === currrentTurn){\n                    tilesToCheck.push(cell);\n                }\n            })\n        })\n\n        if(tilesToCheck.length === 0) {\n            var winner;\n            if((previousTurn === \"P1\" && this.props.isHost) || (previousTurn === \"P2\" && this.props.isHost === false)){\n                winner = this.props.name;\n            } else {\n                winner = this.props.opponentName\n            }\n            \n            this.setState({\n                winner: winner,\n                finished: true,\n            });\n        }\n\n        this.setState({\n            turn: currrentTurn,\n        })\n\n        this.props.flipTurnCallback();\n        this.props.socket.emit(\"user-switch-turn\", {turn: currrentTurn, board: this.state.board});\n    }\n\n    ReceiveKillMove = (receivedData) => {\n        var currrentTurn = receivedData.turn;\n        var board = receivedData.board;\n\n        board.map(row => row.map((cell) => {\n            cell.highlighted = false;\n            cell.forced = false;\n            cell.canHit = false;\n        }));\n\n        this.setState({\n            turn: currrentTurn,\n            board: board,\n        })\n    }\n\n    ReceiveMove = (receivedData) => {\n        \n        var currrentTurn = receivedData.turn;\n        var board = receivedData.board;\n        tempBoard = receivedData.board;\n\n        console.log(receivedData);\n\n        var tilesToCheck = [];\n        board.filter(function (col) {\n            col.filter(function (cell) {\n                if(cell.usedBy === currrentTurn){\n                    tilesToCheck.push(cell);\n                }\n            })\n        })\n\n        if(tilesToCheck.length === 0) {\n            var previousTurn = currrentTurn === \"P1\" ? \"P2\" : \"P1\";\n            var winner;\n            if((previousTurn === \"P1\" && this.props.isHost) || (previousTurn === \"P2\" && this.props.isHost === false)){\n                winner = this.props.name;\n            } else {\n                winner = this.props.opponentName\n            }\n\n            this.setState({\n                winner: winner,\n                finished: true,\n            });\n        }\n\n        tilesToCheck.forEach(cell => {\n            this.FindForced(cell, cell.cords, currrentTurn === \"P1\" ? true : false, true, true, false);\n            if(cell.king) {\n                this.FindForced(cell, cell.cords, currrentTurn === \"P1\" ? false : true, true, true, false);\n            }\n        })\n\n        hittableCells.forEach(hittableCell =>  hittableCell.forced = true);\n\n        this.setState({\n            turn: currrentTurn,\n            board: board,\n        })\n    }\n\n    render() {\n\n        var gameOverUI = \"\";\n        if(this.state.finished) {\n            gameOverUI = [\n                <GameOverPanel winner={this.state.winner}/>,\n                <GameOverButton callback={this.BackToMenu} text=\"Return\" left=\"15\"/>,\n                <GameOverButton callback={this.RestartGame} text=\"Rematch\" left=\"55\"/>\n            ]\n        }\n\n        return (\n            <div className=\"checkerContainer\">\n                <StyledBoard>\n                    {this.state.board.map(row => row.map((cell, x) => <Cell key={x} onCellClick={this.CellClick} cellInfo={cell}/>))}\n                </StyledBoard> \n                {gameOverUI}   \n            </div>\n        );\n    }\n};\n\nexport default Checkers;"]},"metadata":{},"sourceType":"module"}