{"ast":null,"code":"var _jsxFileName = \"/Users/dam136/Desktop/React-Checkers-master/multiplayer-checkers/Client/src/components/Cell.js\";\nimport React from 'react';\nimport { StyledCell } from './styles/styledCell';\nimport Piece from './Piece';\n\nclass Cell extends React.Component {\n  render() {\n    var color = \"\";\n\n    if (this.props.cellInfo.usedBy === \"P1\") {\n      color = \"white\";\n    } else if (this.props.cellInfo.usedBy === \"P2\") {\n      color = \"black\";\n    }\n\n    var piece;\n\n    if (color !== \"\") {\n      piece = /*#__PURE__*/React.createElement(Piece, {\n        color: color,\n        outline: this.props.cellInfo.canHit ? \"Orange\" : \"grey\",\n        king: this.props.cellInfo.king,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 21\n        }\n      });\n    }\n\n    var cellColor = \"\";\n\n    if (this.props.cellInfo.forced && this.props.cellInfo.highlighted) {\n      cellColor = \"Red\";\n    } else if (this.props.cellInfo.forced) {\n      cellColor = \"LightCoral\";\n    } else if (this.props.cellInfo.highlighted) {\n      cellColor = \"Aqua\";\n    } else {\n      cellColor = this.props.cellInfo.color;\n    }\n\n    return /*#__PURE__*/React.createElement(StyledCell, {\n      onClick: () => this.props.onCellClick(this.props.cellInfo),\n      color: cellColor,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 13\n      }\n    }, piece);\n  }\n\n}\n\n;\nexport default Cell;","map":{"version":3,"sources":["/Users/dam136/Desktop/React-Checkers-master/multiplayer-checkers/Client/src/components/Cell.js"],"names":["React","StyledCell","Piece","Cell","Component","render","color","props","cellInfo","usedBy","piece","canHit","king","cellColor","forced","highlighted","onCellClick"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,OAAOC,KAAP,MAAkB,SAAlB;;AAEA,MAAMC,IAAN,SAAmBH,KAAK,CAACI,SAAzB,CAAmC;AAG/BC,EAAAA,MAAM,GAAG;AACL,QAAIC,KAAK,GAAG,EAAZ;;AACA,QAAI,KAAKC,KAAL,CAAWC,QAAX,CAAoBC,MAApB,KAA+B,IAAnC,EAAyC;AACrCH,MAAAA,KAAK,GAAG,OAAR;AACH,KAFD,MAEO,IAAI,KAAKC,KAAL,CAAWC,QAAX,CAAoBC,MAApB,KAA+B,IAAnC,EAAyC;AAC5CH,MAAAA,KAAK,GAAG,OAAR;AACH;;AAED,QAAII,KAAJ;;AAEA,QAAGJ,KAAK,KAAK,EAAb,EAAgB;AACZI,MAAAA,KAAK,gBAAG,oBAAC,KAAD;AAAO,QAAA,KAAK,EAAEJ,KAAd;AAAqB,QAAA,OAAO,EAAE,KAAKC,KAAL,CAAWC,QAAX,CAAoBG,MAApB,GAA6B,QAA7B,GAAwC,MAAtE;AAA8E,QAAA,IAAI,EAAE,KAAKJ,KAAL,CAAWC,QAAX,CAAoBI,IAAxG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAR;AACH;;AAED,QAAIC,SAAS,GAAG,EAAhB;;AACA,QAAG,KAAKN,KAAL,CAAWC,QAAX,CAAoBM,MAApB,IAA8B,KAAKP,KAAL,CAAWC,QAAX,CAAoBO,WAArD,EAAiE;AAC7DF,MAAAA,SAAS,GAAG,KAAZ;AACH,KAFD,MAEO,IAAI,KAAKN,KAAL,CAAWC,QAAX,CAAoBM,MAAxB,EAAgC;AACnCD,MAAAA,SAAS,GAAG,YAAZ;AACH,KAFM,MAEA,IAAI,KAAKN,KAAL,CAAWC,QAAX,CAAoBO,WAAxB,EAAqC;AACxCF,MAAAA,SAAS,GAAG,MAAZ;AACH,KAFM,MAEA;AACHA,MAAAA,SAAS,GAAG,KAAKN,KAAL,CAAWC,QAAX,CAAoBF,KAAhC;AACH;;AAED,wBACI,oBAAC,UAAD;AAAY,MAAA,OAAO,EAAE,MAAM,KAAKC,KAAL,CAAWS,WAAX,CAAuB,KAAKT,KAAL,CAAWC,QAAlC,CAA3B;AAAwE,MAAA,KAAK,EAAEK,SAA/E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKH,KADL,CADJ;AAKH;;AAjC8B;;AAkClC;AAED,eAAeP,IAAf","sourcesContent":["import React from 'react';\nimport { StyledCell } from './styles/styledCell';\nimport Piece from './Piece';\n\nclass Cell extends React.Component {\n\n    \n    render() {\n        var color = \"\";\n        if (this.props.cellInfo.usedBy === \"P1\") {\n            color = \"white\";\n        } else if (this.props.cellInfo.usedBy === \"P2\") {\n            color = \"black\";\n        }\n\n        var piece;\n        \n        if(color !== \"\"){\n            piece = <Piece color={color} outline={this.props.cellInfo.canHit ? \"Orange\" : \"grey\"} king={this.props.cellInfo.king}/>\n        }\n\n        var cellColor = \"\";\n        if(this.props.cellInfo.forced && this.props.cellInfo.highlighted){\n            cellColor = \"Red\";\n        } else if (this.props.cellInfo.forced) {\n            cellColor = \"LightCoral\";\n        } else if (this.props.cellInfo.highlighted) {\n            cellColor = \"Aqua\";\n        } else { \n            cellColor = this.props.cellInfo.color;\n        }\n\n        return (\n            <StyledCell onClick={() => this.props.onCellClick(this.props.cellInfo)} color={cellColor}>\n                {piece}\n            </StyledCell>\n        )\n    }\n};\n\nexport default Cell;"]},"metadata":{},"sourceType":"module"}